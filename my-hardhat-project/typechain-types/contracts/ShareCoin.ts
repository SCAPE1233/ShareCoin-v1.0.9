/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ShareCoinInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BLOCK_REWARD"
      | "MAX_SUPPLY"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "basicDailyRate"
      | "blockAlreadyUsed"
      | "blockHistory"
      | "claimMultipleRewards"
      | "claimReward"
      | "confirmationThreshold"
      | "decimals"
      | "defaultDifficulty"
      | "getBlockHistoryLength"
      | "getSubscriptionInfo"
      | "lifetimeLimit"
      | "lifetimePrice"
      | "lifetimeSold"
      | "name"
      | "owner"
      | "ownerWithdrawSubscriptionFunds"
      | "paymentToken"
      | "premiumDailyRate"
      | "purchaseLifetimeSubscription"
      | "purchaseSubscription"
      | "renounceOwnership"
      | "serverSubmitMultipleMinedBlocksAndMintOnBehalf"
      | "setDifficulty"
      | "standardDailyRate"
      | "submitMinedBlock"
      | "submitMultipleMinedBlocksAndMint"
      | "subscriptionActiveFor"
      | "subscriptions"
      | "symbol"
      | "tokenLogoURI"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "userPlan"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "BlockMined"
      | "DifficultySet"
      | "LifetimeSubscriptionPurchased"
      | "OwnershipTransferred"
      | "RewardClaimed"
      | "SubscriptionPurchased"
      | "Transfer"
      | "WithdrawnSubscriptionFunds"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BLOCK_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "basicDailyRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blockAlreadyUsed",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blockHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMultipleRewards",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmationThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "defaultDifficulty",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockHistoryLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lifetimeLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lifetimePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lifetimeSold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerWithdrawSubscriptionFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "premiumDailyRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseLifetimeSubscription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseSubscription",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "serverSubmitMultipleMinedBlocksAndMintOnBehalf",
    values: [AddressLike, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setDifficulty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "standardDailyRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitMinedBlock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitMultipleMinedBlocksAndMint",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionActiveFor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenLogoURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userPlan",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BLOCK_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_SUPPLY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "basicDailyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockAlreadyUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMultipleRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultDifficulty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockHistoryLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lifetimeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lifetimePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lifetimeSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdrawSubscriptionFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "premiumDailyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseLifetimeSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serverSubmitMultipleMinedBlocksAndMintOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDifficulty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "standardDailyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitMinedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitMultipleMinedBlocksAndMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionActiveFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenLogoURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userPlan", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlockMinedEvent {
  export type InputTuple = [
    blockNumber: BigNumberish,
    blockHash: BytesLike,
    miner: AddressLike
  ];
  export type OutputTuple = [
    blockNumber: bigint,
    blockHash: string,
    miner: string
  ];
  export interface OutputObject {
    blockNumber: bigint;
    blockHash: string;
    miner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DifficultySetEvent {
  export type InputTuple = [difficulty: BigNumberish];
  export type OutputTuple = [difficulty: bigint];
  export interface OutputObject {
    difficulty: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LifetimeSubscriptionPurchasedEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    blockNumber: BigNumberish,
    miner: AddressLike,
    reward: BigNumberish
  ];
  export type OutputTuple = [
    blockNumber: bigint,
    miner: string,
    reward: bigint
  ];
  export interface OutputObject {
    blockNumber: bigint;
    miner: string;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionPurchasedEvent {
  export type InputTuple = [
    user: AddressLike,
    plan: BigNumberish,
    expiry: BigNumberish
  ];
  export type OutputTuple = [user: string, plan: bigint, expiry: bigint];
  export interface OutputObject {
    user: string;
    plan: bigint;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnSubscriptionFundsEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ShareCoin extends BaseContract {
  connect(runner?: ContractRunner | null): ShareCoin;
  waitForDeployment(): Promise<this>;

  interface: ShareCoinInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BLOCK_REWARD: TypedContractMethod<[], [bigint], "view">;

  MAX_SUPPLY: TypedContractMethod<[], [bigint], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  basicDailyRate: TypedContractMethod<[], [bigint], "view">;

  blockAlreadyUsed: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  blockHistory: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean] & {
        blockNumber: bigint;
        blockHash: string;
        miner: string;
        timestamp: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;

  claimMultipleRewards: TypedContractMethod<
    [indexes: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  claimReward: TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;

  confirmationThreshold: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  defaultDifficulty: TypedContractMethod<[], [bigint], "view">;

  getBlockHistoryLength: TypedContractMethod<[], [bigint], "view">;

  getSubscriptionInfo: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, boolean] & {
        plan: bigint;
        expiry: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  lifetimeLimit: TypedContractMethod<[], [bigint], "view">;

  lifetimePrice: TypedContractMethod<[], [bigint], "view">;

  lifetimeSold: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerWithdrawSubscriptionFunds: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  paymentToken: TypedContractMethod<[], [string], "view">;

  premiumDailyRate: TypedContractMethod<[], [bigint], "view">;

  purchaseLifetimeSubscription: TypedContractMethod<[], [void], "nonpayable">;

  purchaseSubscription: TypedContractMethod<
    [plan: BigNumberish, daysCount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  serverSubmitMultipleMinedBlocksAndMintOnBehalf: TypedContractMethod<
    [user: AddressLike, blockNumbers: BigNumberish[], nonces: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setDifficulty: TypedContractMethod<
    [newDifficulty: BigNumberish],
    [void],
    "nonpayable"
  >;

  standardDailyRate: TypedContractMethod<[], [bigint], "view">;

  submitMinedBlock: TypedContractMethod<
    [_blockNumber: BigNumberish, nonce: BigNumberish],
    [void],
    "nonpayable"
  >;

  submitMultipleMinedBlocksAndMint: TypedContractMethod<
    [blockNumbers: BigNumberish[], nonces: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  subscriptionActiveFor: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  subscriptions: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenLogoURI: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userPlan: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BLOCK_REWARD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_SUPPLY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "basicDailyRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "blockAlreadyUsed"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "blockHistory"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, boolean] & {
        blockNumber: bigint;
        blockHash: string;
        miner: string;
        timestamp: bigint;
        claimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimMultipleRewards"
  ): TypedContractMethod<[indexes: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmationThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "defaultDifficulty"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBlockHistoryLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSubscriptionInfo"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, boolean] & {
        plan: bigint;
        expiry: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lifetimeLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lifetimePrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lifetimeSold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerWithdrawSubscriptionFunds"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paymentToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "premiumDailyRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "purchaseLifetimeSubscription"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "purchaseSubscription"
  ): TypedContractMethod<
    [plan: BigNumberish, daysCount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "serverSubmitMultipleMinedBlocksAndMintOnBehalf"
  ): TypedContractMethod<
    [user: AddressLike, blockNumbers: BigNumberish[], nonces: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDifficulty"
  ): TypedContractMethod<[newDifficulty: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "standardDailyRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "submitMinedBlock"
  ): TypedContractMethod<
    [_blockNumber: BigNumberish, nonce: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitMultipleMinedBlocksAndMint"
  ): TypedContractMethod<
    [blockNumbers: BigNumberish[], nonces: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subscriptionActiveFor"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "subscriptions"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenLogoURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userPlan"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "BlockMined"
  ): TypedContractEvent<
    BlockMinedEvent.InputTuple,
    BlockMinedEvent.OutputTuple,
    BlockMinedEvent.OutputObject
  >;
  getEvent(
    key: "DifficultySet"
  ): TypedContractEvent<
    DifficultySetEvent.InputTuple,
    DifficultySetEvent.OutputTuple,
    DifficultySetEvent.OutputObject
  >;
  getEvent(
    key: "LifetimeSubscriptionPurchased"
  ): TypedContractEvent<
    LifetimeSubscriptionPurchasedEvent.InputTuple,
    LifetimeSubscriptionPurchasedEvent.OutputTuple,
    LifetimeSubscriptionPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "SubscriptionPurchased"
  ): TypedContractEvent<
    SubscriptionPurchasedEvent.InputTuple,
    SubscriptionPurchasedEvent.OutputTuple,
    SubscriptionPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawnSubscriptionFunds"
  ): TypedContractEvent<
    WithdrawnSubscriptionFundsEvent.InputTuple,
    WithdrawnSubscriptionFundsEvent.OutputTuple,
    WithdrawnSubscriptionFundsEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "BlockMined(uint256,bytes32,address)": TypedContractEvent<
      BlockMinedEvent.InputTuple,
      BlockMinedEvent.OutputTuple,
      BlockMinedEvent.OutputObject
    >;
    BlockMined: TypedContractEvent<
      BlockMinedEvent.InputTuple,
      BlockMinedEvent.OutputTuple,
      BlockMinedEvent.OutputObject
    >;

    "DifficultySet(uint256)": TypedContractEvent<
      DifficultySetEvent.InputTuple,
      DifficultySetEvent.OutputTuple,
      DifficultySetEvent.OutputObject
    >;
    DifficultySet: TypedContractEvent<
      DifficultySetEvent.InputTuple,
      DifficultySetEvent.OutputTuple,
      DifficultySetEvent.OutputObject
    >;

    "LifetimeSubscriptionPurchased(address)": TypedContractEvent<
      LifetimeSubscriptionPurchasedEvent.InputTuple,
      LifetimeSubscriptionPurchasedEvent.OutputTuple,
      LifetimeSubscriptionPurchasedEvent.OutputObject
    >;
    LifetimeSubscriptionPurchased: TypedContractEvent<
      LifetimeSubscriptionPurchasedEvent.InputTuple,
      LifetimeSubscriptionPurchasedEvent.OutputTuple,
      LifetimeSubscriptionPurchasedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RewardClaimed(uint256,address,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "SubscriptionPurchased(address,uint8,uint256)": TypedContractEvent<
      SubscriptionPurchasedEvent.InputTuple,
      SubscriptionPurchasedEvent.OutputTuple,
      SubscriptionPurchasedEvent.OutputObject
    >;
    SubscriptionPurchased: TypedContractEvent<
      SubscriptionPurchasedEvent.InputTuple,
      SubscriptionPurchasedEvent.OutputTuple,
      SubscriptionPurchasedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "WithdrawnSubscriptionFunds(uint256)": TypedContractEvent<
      WithdrawnSubscriptionFundsEvent.InputTuple,
      WithdrawnSubscriptionFundsEvent.OutputTuple,
      WithdrawnSubscriptionFundsEvent.OutputObject
    >;
    WithdrawnSubscriptionFunds: TypedContractEvent<
      WithdrawnSubscriptionFundsEvent.InputTuple,
      WithdrawnSubscriptionFundsEvent.OutputTuple,
      WithdrawnSubscriptionFundsEvent.OutputObject
    >;
  };
}
